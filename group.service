const pool = require('../../config/database');

module.exports = {

  createGroup: async (userId, groupName) => {
    let connection;
    try {
      connection = await pool.getConnection();
      await connection.beginTransaction();
      
      const groupCode = Math.random().toString(36).substring(2, 8).toUpperCase();
      
      const [groupResult] = await connection.query(
        'INSERT INTO groups (group_name, group_code, created_by) VALUES (?, ?, ?)',
        [groupName, groupCode, userId]
      );
      
      await connection.query(
        'INSERT INTO group_members (group_id, user_id, role) VALUES (?, ?, ?)',
        [groupResult.insertId, userId, 'admin']
      );
      
      await connection.commit();
      return { groupCode, groupId: groupResult.insertId };
    } catch (err) {
      if (connection) await connection.rollback();
      throw err;
    } finally {
      if (connection) connection.release();
    }
  },

  joinGroup: async (userId, groupCode) => {
    let connection; // NEWWWWWWW
    try {
      connection = await pool.getConnection();
      const [groups] = await connection.query(
        'SELECT id FROM groups WHERE group_code = ?',
        [groupCode]
      );
      
      if (groups.length === 0) {
        throw new Error('Invalid group code');
      }
      
      const groupId = groups[0].id;
      
      // Check if already a member
      const [existing] = await connection.query(
        'SELECT id FROM group_members WHERE group_id = ? AND user_id = ?',
        [groupId, userId]
      );
    
      if (existing.length > 0) {
        throw new Error('You are already a member of this group');
      }
      
      await connection.query(
        'INSERT INTO group_members (group_id, user_id, role) VALUES (?, ?, ?)',
        [groupId, userId, 'member']
      );

      return groupId;
    } catch (err) {
      throw err;
    } finally {
      if (connection) connection.release();
    }
  },

  getUserGroups: async (userId) => {
    const connection = await pool.getConnection();
    try {
      const [groups] = await connection.query(
        `SELECT g.id, g.group_name, g.group_code, g.created_at 
         FROM groups g
         JOIN group_members gm ON g.id = gm.group_id
         WHERE gm.user_id = ?`,
        [userId]
      );
      return groups;
    } finally {
      connection.release();
    }
  }
};
